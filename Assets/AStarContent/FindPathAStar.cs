using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;

public class PathMarker
{
    public MapLocation location;
    public float G; //Cost to goal from start
    public float H; //Cost to goal
    public float F; // H + G

    public GameObject marker;
    public PathMarker parent;

    public PathMarker(MapLocation ml, float g, float h, float f, GameObject m, PathMarker p)
    {
        location = ml;
        G = g;
        H = h;
        F = f;

        marker = m;
        parent = p;
    }

    //Determines whether the passed in PathMarker is same as this path marker
    public override bool Equals(object obj)
    {
        if ((obj == null) || !this.GetType().Equals(obj.GetType()))
        {
            return false;
        }
        else
        {
            return location.Equals(((PathMarker)obj).location);
        }
    }

    //This is defined as Unity complaints about overriding Equals() and not this  (Not Mandatory, just to avoid Warning)
    public override int GetHashCode()
    {
        return base.GetHashCode();
    }

}

public class FindPathAStar : MonoBehaviour
{
    public MazeAStar maze;
    public Material closedMat;
    public Material openMat;

    List<PathMarker> openList = new List<PathMarker>();
    List<PathMarker> closedList = new List<PathMarker>();

    //Hold all the placed marker
    List<GameObject> markers = new List<GameObject>();

    //Destroys all the placed markers
    void RemoveAllMarkers()
    {
        foreach (GameObject marker in markers)
        {
            Destroy(marker);
            markers.Clear();
        }
    }

    PathMarker startNode;
    PathMarker goalNode;
    PathMarker lastPos;

    bool isDone = false;

    public GameObject pathStart;
    public GameObject pathEnd;
    public GameObject pathP;

    void BeginSearch()
    {
        isDone = false;
        RemoveAllMarkers();

        //Make a list of nodes (In this case all the Non Wall locations generated by algo)
        List<MapLocation> locations = new List<MapLocation>();

        //Add all the locations that are not walls in the list
        for(int z = 1; z < maze.size_Z - 1; z++)
        {
            for (int x = 1; x < maze.size_X - 1; x++)
            {
                if (maze.map[x, z] != 1)
                    locations.Add(new MapLocation(x, z));
            }
        }

        //Shuffle the list
        locations.Shuffle();

        //Choose Random StartLocation
        Vector3 startLocation = new Vector3(locations[0].x * maze.scale, 0, locations[0].z * maze.scale);
        startNode = new PathMarker(new MapLocation(locations[0].x, locations[0].z), 0, 0, 0, Instantiate(pathStart, startLocation, Quaternion.identity), null);

        //Choose Random EndLocation
        Vector3 goalLocation = new Vector3(locations[1].x * maze.scale, 0, locations[1].z * maze.scale);
        goalNode = new PathMarker(new MapLocation(locations[1].x, locations[1].z), 0, 0, 0, Instantiate(pathEnd, goalLocation, Quaternion.identity), null);

    }

    private void Update()
    {
        if (Input.GetKeyDown(KeyCode.P))
        {
            BeginSearch();
        }
    }

}
